{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Using Scarf as software distribution tool Scarf's mission is to help open source developers distribute and monetize their work. What is Scarf? Why should I use it? Scarf is a developer-centric, cross-platform system package manager that enables developers to see how their software is actually used and to get paid for their work. If you distribute your software with Scarf, your users will be able to easily install it with the scarf CLI, and you'll gain insights into how your software is used such as: Install counts Exit codes when your program is invoked Execution times Sub-commands and flags that are passed on the command line The best part is that you can get all of these features without writing any code! You simply upload your package to Scarf. The end-user will install your package via scarf which installs your program inside a wrapper so that Scarf can capture your package's usage statistics. Future work will be to allow you to charge installers of your packages for installation, usage, and/or support. Install Scarf You'll need to install the scarf CLI with: $ curl -L https://scarf.sh/install | bash Create your Scarf account Head over to https://scarf.sh to register your developer account. Create your first package Once you're registered, you'll want to create your package on the \"New Package\" page of the Scarf website . You'll need a unique package name, and some description of what your package does. Define your package specification You can now add releases to your package that your users can install! A Scarf package release primarily involves writing a small package specification or editing your existing one. Scarf specs are written in Dhall , a nifty alternative to yaml. An example package file would look something like: -- import scarf dhall definitions at the top let platforms = https://gist.githubusercontent.com/aviaviavi/16caf330e97df23c892cab1c97316ba9/raw -- then, you'll specify a list of distributions (one per platform) in { distributions = [ { platform = platforms.mac , simpleExecutableInstall = \"curl-runnings\" -- `URI` can point to a local tar archive or a remote one, here, we use a local one , uri = \"./curl-runnings-0.11.0-mac.tar.gz\" } , { platform = platforms.linux_x86_64 , simpleExecutableInstall = \"curl-runnings\" -- `URI` can point to a remote archive, like a Github release , uri = \"https://github.com/aviaviavi/curl-runnings/releases/download/0.11.0/curl-runnings-0.11.0.tar.gz\" } ] , name = \"curl-runnings\" -- Use standard semantic versioning , version = \"0.11.0\" , author = \"Avi Press\" , copyright = \"2019 Avi Press\" , license = \"MIT\" } Some notes: simpleExecutableInstall is currently the only install type supported, but more will be coming soon. You can use the scarf check-package ./path/to/your/package-file.dhall to validate your package file. Currently, it won't do things like check your archive or test your release, but it will make sure you spec type-checks, and that you have a valid license type and platform. Upload your release Once you have a valid spec, it's time to upload! You'll need your SCARF_API_TOKEN , which you can find by going to your account page . To upload, run: SCARF_API_TOKEN=${your_token} scarf upload ./path/to/your/validated-spec.dhall Packages on Scarf can't be deleted once they're uploaded! This is part of the reason scarf uses dhall for package files: Static types will help us enforce that package specs are correct ahead of time. Once your release is uploaded, your users can install your package with a simple: scarf install ${your_package_name} View your package analytics Once you've pushed a release to your package, you can head over to the dashboard to see your packages install and usage stats!","title":"Distributing your software with scarf"},{"location":"#using-scarf-as-software-distribution-tool","text":"Scarf's mission is to help open source developers distribute and monetize their work.","title":"Using Scarf as software distribution tool"},{"location":"#what-is-scarf-why-should-i-use-it","text":"Scarf is a developer-centric, cross-platform system package manager that enables developers to see how their software is actually used and to get paid for their work. If you distribute your software with Scarf, your users will be able to easily install it with the scarf CLI, and you'll gain insights into how your software is used such as: Install counts Exit codes when your program is invoked Execution times Sub-commands and flags that are passed on the command line The best part is that you can get all of these features without writing any code! You simply upload your package to Scarf. The end-user will install your package via scarf which installs your program inside a wrapper so that Scarf can capture your package's usage statistics. Future work will be to allow you to charge installers of your packages for installation, usage, and/or support.","title":"What is Scarf? Why should I use it?"},{"location":"#install-scarf","text":"You'll need to install the scarf CLI with: $ curl -L https://scarf.sh/install | bash","title":"Install Scarf"},{"location":"#create-your-scarf-account","text":"Head over to https://scarf.sh to register your developer account.","title":"Create your Scarf account"},{"location":"#create-your-first-package","text":"Once you're registered, you'll want to create your package on the \"New Package\" page of the Scarf website . You'll need a unique package name, and some description of what your package does.","title":"Create your first package"},{"location":"#define-your-package-specification","text":"You can now add releases to your package that your users can install! A Scarf package release primarily involves writing a small package specification or editing your existing one. Scarf specs are written in Dhall , a nifty alternative to yaml. An example package file would look something like: -- import scarf dhall definitions at the top let platforms = https://gist.githubusercontent.com/aviaviavi/16caf330e97df23c892cab1c97316ba9/raw -- then, you'll specify a list of distributions (one per platform) in { distributions = [ { platform = platforms.mac , simpleExecutableInstall = \"curl-runnings\" -- `URI` can point to a local tar archive or a remote one, here, we use a local one , uri = \"./curl-runnings-0.11.0-mac.tar.gz\" } , { platform = platforms.linux_x86_64 , simpleExecutableInstall = \"curl-runnings\" -- `URI` can point to a remote archive, like a Github release , uri = \"https://github.com/aviaviavi/curl-runnings/releases/download/0.11.0/curl-runnings-0.11.0.tar.gz\" } ] , name = \"curl-runnings\" -- Use standard semantic versioning , version = \"0.11.0\" , author = \"Avi Press\" , copyright = \"2019 Avi Press\" , license = \"MIT\" } Some notes: simpleExecutableInstall is currently the only install type supported, but more will be coming soon. You can use the scarf check-package ./path/to/your/package-file.dhall to validate your package file. Currently, it won't do things like check your archive or test your release, but it will make sure you spec type-checks, and that you have a valid license type and platform.","title":"Define your package specification"},{"location":"#upload-your-release","text":"Once you have a valid spec, it's time to upload! You'll need your SCARF_API_TOKEN , which you can find by going to your account page . To upload, run: SCARF_API_TOKEN=${your_token} scarf upload ./path/to/your/validated-spec.dhall Packages on Scarf can't be deleted once they're uploaded! This is part of the reason scarf uses dhall for package files: Static types will help us enforce that package specs are correct ahead of time. Once your release is uploaded, your users can install your package with a simple: scarf install ${your_package_name}","title":"Upload your release"},{"location":"#view-your-package-analytics","text":"Once you've pushed a release to your package, you can head over to the dashboard to see your packages install and usage stats!","title":"View your package analytics"},{"location":"end-user/","text":"Using Scarf as system package manager Overview In addition to easy package management, Scarf supports installing static binaries in a way that sends anonymized usage statistics to the package author. Installation $ curl -L https://scarf.sh/install | bash You'll then need to add ~/.scarf/bin to you PATH Install your packages $ scarf install <package>","title":"Scarf as system package manager"},{"location":"end-user/#using-scarf-as-system-package-manager","text":"","title":"Using Scarf as system package manager"},{"location":"end-user/#overview","text":"In addition to easy package management, Scarf supports installing static binaries in a way that sends anonymized usage statistics to the package author.","title":"Overview"},{"location":"end-user/#installation","text":"$ curl -L https://scarf.sh/install | bash You'll then need to add ~/.scarf/bin to you PATH","title":"Installation"},{"location":"end-user/#install-your-packages","text":"$ scarf install <package>","title":"Install your packages"},{"location":"project-status/","text":"Project status Scarf is still in its very early stages and is under heavy development. Feedback of any kind of very welcome. Tell us what you think! Reach out to feedback@scarf.sh or open an issue on github for feature requests, bug reports, questions and comments. Currently, scarf only supports a small subset of the planned features. We're working hard to deliver on our roadmap below. For developers: [x] Hosting and distribution for your packages [x] Basic analytics [] Monetization [] Accept payments on installation [] Accept payments for running your software [] Tiered user system for different payment levels. Eg, the ability to allow individual developers to user your package for free, but charge companies to use it. [] An SDK for more fine-grained scarf integration with your code For users: [] A fully featured package managment experience for users [x] Basic binary installation [] Complex build installation [] Dependency management [] Clean user package specification [] Per project functionality","title":"Project Status and Roadmap"},{"location":"project-status/#project-status","text":"Scarf is still in its very early stages and is under heavy development. Feedback of any kind of very welcome. Tell us what you think! Reach out to feedback@scarf.sh or open an issue on github for feature requests, bug reports, questions and comments. Currently, scarf only supports a small subset of the planned features. We're working hard to deliver on our roadmap below. For developers: [x] Hosting and distribution for your packages [x] Basic analytics [] Monetization [] Accept payments on installation [] Accept payments for running your software [] Tiered user system for different payment levels. Eg, the ability to allow individual developers to user your package for free, but charge companies to use it. [] An SDK for more fine-grained scarf integration with your code For users: [] A fully featured package managment experience for users [x] Basic binary installation [] Complex build installation [] Dependency management [] Clean user package specification [] Per project functionality","title":"Project status"}]}